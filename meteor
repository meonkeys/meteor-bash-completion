# bash completion for meteor     -*- shell-script -*-
# vim: ft=sh ts=2 sw=2 et

__initMeteorCommands() {
  test "$meteorCommands" && return 0
  meteorCommands=$( $1 help | \grep '^   \w' | sed -e 's/^[ \t]\+//' | cut -d' ' -f1)
  meteorCommands="$meteorCommands $( _parse_usage $1 help)"
  # can't easily parse out the help command
  meteorCommands="help $meteorCommands $( _parse_usage $1 help)"
}

_meteor() {
  local cur prev commands
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  case "${prev}" in
    # Abort after we've completed any option. This is an easy way to stop
    # Bash's default completion behavior while we're in the middle of composing
    # a command line.
    -*)
      return 0
      ;;

    --example)
      COMPREPLY=($(compgen -W '$( meteor create --list | grep "^  " )' -- ${cur}))
      return 0
      ;;

    authorized)
      local authorized=" \
        --add \
        --remove \
        --list"

      COMPREPLY=($(compgen -W "${authorized}" -- ${cur}))
      return 0
      ;;

    bundle)
      local bundle=" \
        --debug \
        --directory"

      COMPREPLY=($(compgen -W "${bundle}" -- ${cur}))
      return 0
      ;;

    create)
      case "${prev}" in
        --example)
          COMPREPLY=($(compgen -W '$( meteor create --list | grep "^  " )' -- ${cur}))
          return 0
          ;;
      esac
      local create=" \
        --example \
        --list"

      COMPREPLY=($(compgen -W "${create}" -- ${cur}))
      return 0
      ;;

    deploy)
      local deploy=" \
        --delete -D \
        --debug \
        --settings \
        --star"

      COMPREPLY=($(compgen -W "${deploy}" -- ${cur}))
      return 0
      ;;

    login)
      local login=" \
        --email"

      COMPREPLY=($(compgen -W "${login}" -- ${cur}))
      return 0
      ;;

    mongo)
      local mongo=" \
        -U \
        --url"

      COMPREPLY=($(compgen -W "${mongo}" -- ${cur}))
      return 0
      ;;

    publish)
      local publish=" \
        --create"

      COMPREPLY=($(compgen -W "${publish}" -- ${cur}))
      return 0
      ;;

    publish-release)
      local publishrelease=" \
        --create-track"

      COMPREPLY=($(compgen -W "${publishrelease}" -- ${cur}))
      return 0
      ;;

    remove)
      if [[ -r .meteor/packages ]]
      then
        installed=$( grep -v '^#' .meteor/packages )
      fi
      COMPREPLY=($(compgen -W "$installed" -- ${cur}))
      return 0
      ;;

    run)
      local run=" \
        --port -p \
        --production \
        --raw-logs \
        --settings \
        --release \
        --program"

      COMPREPLY=($(compgen -W "${run}" -- ${cur}))
      return 0
      ;;

    test-packages)
      local testpackages=" \
        --port -p \
        --deploy \
        --production \
        --settings"

      COMPREPLY=($(compgen -W "${testpackages}" -- ${cur}))
      return 0
      ;;

    update)
      local update=" \
        --release"

      COMPREPLY=($(compgen -W "${update}" -- ${cur}))
      return 0
      ;;

    # These have no options or are simply too slow for dynamic completion.
    add|claim|list|list-sites|logout|logs|publish-for-arch|reset|show|search|whoami)
      return 0
      ;;
  esac

  __initMeteorCommands $1
  COMPREPLY=($(compgen -W "${meteorCommands}" -- ${cur}))
  return 0
}

complete -F _meteor meteor
